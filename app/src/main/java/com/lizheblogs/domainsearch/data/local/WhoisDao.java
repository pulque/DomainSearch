package com.lizheblogs.domainsearch.data.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lizheblogs.domainsearch.bean.db.Whois;
import com.lizheblogs.domainsearch.data.local.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WHOIS".
*/
public class WhoisDao extends AbstractDao<Whois, String> {

    public static final String TABLENAME = "WHOIS";

    /**
     * Properties of entity Whois.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Domain_name = new Property(1, String.class, "domain_name", true, "DOMAIN_NAME");
        public final static Property Registrar = new Property(2, String.class, "registrar", false, "REGISTRAR");
        public final static Property Creation_date = new Property(3, String.class, "creation_date", false, "CREATION_DATE");
        public final static Property Expiration_date = new Property(4, String.class, "expiration_date", false, "EXPIRATION_DATE");
        public final static Property Updated_date = new Property(5, String.class, "updated_date", false, "UPDATED_DATE");
        public final static Property Registrant_name = new Property(6, String.class, "registrant_name", false, "REGISTRANT_NAME");
        public final static Property Registrant_country = new Property(7, String.class, "registrant_country", false, "REGISTRANT_COUNTRY");
        public final static Property Registrant_phone = new Property(8, String.class, "registrant_phone", false, "REGISTRANT_PHONE");
        public final static Property Admin_name = new Property(9, String.class, "admin_name", false, "ADMIN_NAME");
        public final static Property Admin_phone = new Property(10, String.class, "admin_phone", false, "ADMIN_PHONE");
        public final static Property Tech_name = new Property(11, String.class, "tech_name", false, "TECH_NAME");
        public final static Property Tech_phone = new Property(12, String.class, "tech_phone", false, "TECH_PHONE");
        public final static Property Original_info = new Property(13, String.class, "original_info", false, "ORIGINAL_INFO");
    };


    public WhoisDao(DaoConfig config) {
        super(config);
    }
    
    public WhoisDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WHOIS\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"DOMAIN_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 1: domain_name
                "\"REGISTRAR\" TEXT," + // 2: registrar
                "\"CREATION_DATE\" TEXT," + // 3: creation_date
                "\"EXPIRATION_DATE\" TEXT," + // 4: expiration_date
                "\"UPDATED_DATE\" TEXT," + // 5: updated_date
                "\"REGISTRANT_NAME\" TEXT," + // 6: registrant_name
                "\"REGISTRANT_COUNTRY\" TEXT," + // 7: registrant_country
                "\"REGISTRANT_PHONE\" TEXT," + // 8: registrant_phone
                "\"ADMIN_NAME\" TEXT," + // 9: admin_name
                "\"ADMIN_PHONE\" TEXT," + // 10: admin_phone
                "\"TECH_NAME\" TEXT," + // 11: tech_name
                "\"TECH_PHONE\" TEXT," + // 12: tech_phone
                "\"ORIGINAL_INFO\" TEXT);"); // 13: original_info
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_WHOIS_ID ON WHOIS" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WHOIS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Whois entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String domain_name = entity.getDomain_name();
        if (domain_name != null) {
            stmt.bindString(2, domain_name);
        }
 
        String registrar = entity.getRegistrar();
        if (registrar != null) {
            stmt.bindString(3, registrar);
        }
 
        String creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindString(4, creation_date);
        }
 
        String expiration_date = entity.getExpiration_date();
        if (expiration_date != null) {
            stmt.bindString(5, expiration_date);
        }
 
        String updated_date = entity.getUpdated_date();
        if (updated_date != null) {
            stmt.bindString(6, updated_date);
        }
 
        String registrant_name = entity.getRegistrant_name();
        if (registrant_name != null) {
            stmt.bindString(7, registrant_name);
        }
 
        String registrant_country = entity.getRegistrant_country();
        if (registrant_country != null) {
            stmt.bindString(8, registrant_country);
        }
 
        String registrant_phone = entity.getRegistrant_phone();
        if (registrant_phone != null) {
            stmt.bindString(9, registrant_phone);
        }
 
        String admin_name = entity.getAdmin_name();
        if (admin_name != null) {
            stmt.bindString(10, admin_name);
        }
 
        String admin_phone = entity.getAdmin_phone();
        if (admin_phone != null) {
            stmt.bindString(11, admin_phone);
        }
 
        String tech_name = entity.getTech_name();
        if (tech_name != null) {
            stmt.bindString(12, tech_name);
        }
 
        String tech_phone = entity.getTech_phone();
        if (tech_phone != null) {
            stmt.bindString(13, tech_phone);
        }
 
        String original_info = entity.getOriginal_info();
        if (original_info != null) {
            stmt.bindString(14, original_info);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Whois readEntity(Cursor cursor, int offset) {
        Whois entity = new Whois( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // domain_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // registrar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // creation_date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // expiration_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updated_date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // registrant_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // registrant_country
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // registrant_phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // admin_name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // admin_phone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tech_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tech_phone
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // original_info
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Whois entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDomain_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRegistrar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreation_date(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpiration_date(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdated_date(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRegistrant_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRegistrant_country(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegistrant_phone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAdmin_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAdmin_phone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTech_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTech_phone(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOriginal_info(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Whois entity, long rowId) {
        return entity.getDomain_name();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Whois entity) {
        if(entity != null) {
            return entity.getDomain_name();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
