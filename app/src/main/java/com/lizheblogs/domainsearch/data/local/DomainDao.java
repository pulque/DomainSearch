package com.lizheblogs.domainsearch.data.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lizheblogs.domainsearch.bean.db.Domain;
import com.lizheblogs.domainsearch.data.local.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOMAIN".
*/
public class DomainDao extends AbstractDao<Domain, String> {

    public static final String TABLENAME = "DOMAIN";

    /**
     * Properties of entity Domain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Domain_name = new Property(1, String.class, "domain_name", true, "DOMAIN_NAME");
        public final static Property Original = new Property(2, String.class, "original", false, "ORIGINAL");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property Update_time = new Property(4, Long.class, "update_time", false, "UPDATE_TIME");
        public final static Property Whois_id = new Property(5, String.class, "whois_id", false, "WHOIS_ID");
    };


    public DomainDao(DaoConfig config) {
        super(config);
    }
    
    public DomainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOMAIN\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"DOMAIN_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 1: domain_name
                "\"ORIGINAL\" TEXT," + // 2: original
                "\"CODE\" TEXT," + // 3: code
                "\"UPDATE_TIME\" INTEGER," + // 4: update_time
                "\"WHOIS_ID\" TEXT);"); // 5: whois_id
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DOMAIN_ID ON DOMAIN" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOMAIN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Domain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String domain_name = entity.getDomain_name();
        if (domain_name != null) {
            stmt.bindString(2, domain_name);
        }
 
        String original = entity.getOriginal();
        if (original != null) {
            stmt.bindString(3, original);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        Long update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(5, update_time);
        }
 
        String whois_id = entity.getWhois_id();
        if (whois_id != null) {
            stmt.bindString(6, whois_id);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Domain readEntity(Cursor cursor, int offset) {
        Domain entity = new Domain( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // domain_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // original
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // update_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // whois_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Domain entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDomain_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOriginal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdate_time(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setWhois_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Domain entity, long rowId) {
        return entity.getDomain_name();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Domain entity) {
        if(entity != null) {
            return entity.getDomain_name();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
